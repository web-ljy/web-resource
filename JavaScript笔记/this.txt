1:)

aLi[i].onmouseover=function(){
  this.className="";      //  this:是指当前绑定的元素（aLi[i]）。
}


2:)

*任何一个匿名函数方法或者自执行函数直接运行,它的this无条件就是window ; 
还有一种方法是指这个方法前面没有点或者也没有这个点的主体的对象也是window .
;(function(){
})()


3:) 方法是谁执行，this 就是谁。

* this 情况总结：函数中的 this 是谁，和函数在哪里定义或者在哪里执行，都没有任何关系。

  以下所有的规律都是在"JS非严格模式"下运行的环境 

  ① 自执行函数中的this永远的是window

  ② 给元素的某一个行为绑定一个方法,当行为触发的时候执行这个方法,此时方法中的this是当前的元素

  ③ 我们只需要看函数执行的时候，方法名前面是否有" . "，有的话，" . " 前面是谁this就是谁，没有的话this就是window;


4:) 构造函数模式中，函数体中的this.xxx中的this就是当前类的一个实例。
   

5)call和apply强制改变this的指向->以上所有的this情况在遇到call/apply的时候都不好使,都已强制改变的为主
  obj.fn.call(1);//this->1

  一般情况下,我们执行call方法第一个传递的参数值是谁,那么fn中的this就是谁
  [在非严格模式下]
  第一个参数没有传递值、传递的是null、传递的是undefined fn中的this都是window
  [严格模式下]
  第一个参数传递的是谁this就是谁,传递null/undefined,fn中的this都是对应的null/undefined,不传递值默认也是undefined


总结一句话：你以为 你以为的 就是你以为的    


以上1到4条是JS在[非严格模式]下执行(遇到fn.call(obj)的this不是点前面的fn；) 


fn.call();             // this是window
fn.call(undefinde);   // this是window
fn.call(null);       // this是window

fn.call(obj, 100, 200);
fn.apply(obj, [100,200]);



 
