一、js中数据类型分类：
   
    1:）基本数据类型 -->由简单的结构组成

        数字（number）、字符串（string）、布尔（boolean）、null 、undefined
    

    2:) 引用数据类型 -->由混合的结构组成
        
        对象（object）、函数（function）


1、number(正数 、负数 、0 、小数 、NaN)

    1:) NaN: Not a Number -->不是一个有效数字，但是他是属于number数据类型的；


    2:) isNaN() -->检测一个值不是有效数字的命题是否成立?(是有效数字返回false ,不是有效数字返回true)

    
    3:) Number() -->强制将其他的数据类型转换为 number 数据类型；

                    要求：如果是字符串，字符串中一定都需要是数字才可以转换；
 
                    例如：Number("12")  ==>12 ;  Number("12px")  ==>NaN ;  Number("12.4")  ==>12.4 ;


    4:) 非强制数据类型转换 -->parseInt / parseFloat
     
        parseInt: 从左到右一个个字符查找，把是数字的转换为有效的数字；中途遇到非有效数字（不是数字了）就不再继续查找。
        
        parseFloat: 同上面一样，只是多查找一个小数点.

                    例如：parseInt("12px796")  ==>12 ;  parseInt("hi958")  ==>NaN ; parseInt("12.6")  ==>12 ;

                          parseFloat("12.5px")  ==>12.5 ;

    一道腾讯的面试题：
        
        var val = Number("12px");          // 一开始 val = NaN
        if(val == 12){
           console.log(12);
        }else if(val == NaN){              // NaN == NaN (永远不相等)
           console.log(NaN);
        }else{
           console.log("以上都不成立!");
        }
        
     答案：输出以上都不成立!
        

2、boolean(false 、true)

     1:) !: 一个叹号是取反；首先将值转换为布尔类型，然后取反
	

     2:) !!: 将其他数据类型转换为boolean 类型，相当于Boolean()
             
             例如：console.log(Boolean("Hello Wload"))  ==>输出的是true ;
                 
                   console.log(!!("Hello Wload"))  ==>true ;


     类型转换规则：① 如果只有一个值，判断这个值是真还是假，遵循（只有 0 、NaN 、" " 、null 、undefined）
                          
                      这五个值是假的，其余的都是真的。

                   ② 如果两个值比较是否相等，遵循（val1 == val2）两个值可能不是同一个数据类型的；

                      如果是两个等于号==比较的话，会进行默认的数据类型转换
                    
                     （第1条规则：）对象 == 对象       // 永远不相等

                      例如：console.log([] == [])  ==>输出false 
                            console.log({} == {})  ==>也是false
                            console.log(function fn(){} == function(){})  ==>false
              
                     （第2条规则：）对象 == 字符串     // 先将对象转换成字符串（调用toString的方法），然后再进行比较
  
                      例如：console.log([] == "")  ==>true     // 空数组比较空字符串（首先把空数组[]转换成字符串，相当于数组[].toString() 调用这个方法。）

                      注意：数组[] 与 对象{}大括号的区别   

                            /*  例如：console.log([] == "")   ==>true
                                      console.log([].toString())   ==>"" 输出的是空字符串 ""  
                                      console.log({} == "")   ==>false 
                                      console.log({}.toString())   ==>[object Object]  输出的对象是object
                            */   
             
                      (第3条规则：) 对象 == 布尔值     // 先将对象转换成字符串（调用toString的方法），然后把字符串转换为数字(Number)，布尔类型也转换为数字(只有两个值 true是1 ，false是0) ；最后两个数才比较。                                                              
                           
                      例如：console.log(Number(""))   ==>空字符串0
                            console.log([] == false)    ==>ture

                      (第4条规则：) 对象 == 数字      // 先将对象转换成字符串（调用toString的方法），然后把字符串转换为数字(Number)再比较
                         
                      例如：console.log([] == 1)    ==>false    // 空数组转换为空字符串是0，再0和1比较

                      (第5条规则：) 数字 == 布尔值    // 先将布尔值转换为数字再比较
  
                      例如：console.log(2 == true)   ==>false

                      (第6条规则：) 数字 == 字符串    // 先将字符串转换为数字再比较

                      (第7条规则：) 字符串 == 布尔值    // 都转换为数字再比较

                      (第8条规则：) null == undefined    ==>结果是true。 也就是除了他俩相等，他俩与其他的比较都不相等。 

                      (第9条规则非常重要：) null 或者 undefined 和其他任何数据类型比较都不相等

                   ③ 一个等于号=是赋值；两个等于号==是比较；三个等于号===也是比较(绝对比较)
           
                      遵循（val1 === val2）如果数据类型不一样肯定不相等


3、基本数据类型和引用数据类型的本质区别：(基本数据类型操作的是值；而引用数据类型操作的是对新空间的地址。)

     1:) 基本数据类型是把值直接给变量，接下来操作过程中是直接拿这个值操作的；可能两个变量存储的一样的值，但是你的是你的，我的是我的；之间没有关系，其中一个如果改变了，另一个没有任何影响。

     
     2:) 引用数据类型：① 定义一个变量；
 
                       ② 开辟一个新的空间，然后把属性名和属性值保存在这个新的空间中，并且有一个空间地址；

                       ③ 把空间地址给了这个变量，变量并没有存储这个数值，而存储的是对这个空间的引用地址；

                       ④ 接下来我们把这个地址又告诉了一个另外的变量，另外一个变量存储的也是这个地址，此时两个变量操作的是同一个空间；

                       ⑤ 其中一个改变了空间的内容，另外的也跟着改变了；


4、topeof 返回值类型：(返回的都是字符串类型)

          有6种类型："number"、"string"、"boolean"、"object"、"undefined"、"function"(也就是把基本类型的5种中的null换成 object 再加一个function)


5、如何判断数据类型有4种方法：

          ① typeof             （"number"、"string"、"boolean"、"object"、"undefined"、"function" 上面第4点说明）
  
          ② instanceof         （返回值是 true/false）
 
          ③ constructor

          ④ Object.prototype.toString().call()


二、function 函数

    1:) arguments的应用：（代表所有参数的集合）


    案例：任意数求和和有效数字的检测。

    <script type="text/javascript">
        function fn(){
            var total = 0;
            for(var i=0;i<arguments.length;i++){
                var cur = arguments[i];
                cur = Number(cur);
             /* if(isNaN(cur)===false){
                    total += cur;
                }
                等同于下面*/
                if(!isNaN(cur)){
                    total += cur;
                }
            }
            /*console.log(total);*/   //闭包机制：里面的变量外面是无法使用的；要想在外面想用里面的变量total，必须是想用谁就return 谁;
            return total;
        }
        /*fn(1,2,"a")*/
        var total = fn(1,2,6,"a");
        console.log(total);


/*      function fn() {                            // 求平均数
            arguments.__proto__ = Array.prototype;
            arguments.sort(function (a, b) {
                return a - b;
            });
            arguments.shift();
            arguments.pop();
            console.log(eval(arguments.join("+")) / arguments.length);
        }
        fn(35, 67, 78, 89, 90, 12, 23, 34, 45);*/
    </script>


     2:) return的应用

        ①外面想用什么，在函数里面直接的return返回就可以了；函数执行完成的整体就是这个值。

        ②如果没有写return的话（或者直接写return;），默认的返回结果是undefined。

        ③在函数体中，return后面的代码不在执行；另外一个作用是控制函数体中的代码执行到指定的结束。


三、数组和数组常用的方法：

    学习方法：① 方法是做什么用的，实现的是什么功能

              ② 传递的参数是什么

              ③ 返回值是什么
       
              ④ 原来的数组是否发生了改变

    1:) 关于数组的增加、删除、修改

        ⑴ push() 向数组的末尾添加新的内容
    
                  参数:想向末尾增加哪些内容就传递谁,而且可以传递多个值,统一向末尾增加多项
                  返回:新增加后数组的长度
                  原来的数组已经发生了改变

                  扩展:不想使用push,也想向数组的末尾增加内容（以下两种方式都可以）
                       ary[ary.length] = 10;
                       ary.splice(ary.length, 0, 10);
   
        ⑵ pop() 删除数组最后一项的内容

                 参数:没有
                 返回:被删除的那一项的内容
                 原有的数组也发生改变
              
                 扩展:不用pop,也想删除最后一项的内容（以下四种方式都可以）
                 //->ary.length--;
                 //->ary.length-=1
                 //->ary.length=ary.length-1
                 ary.splice(ary.length-1);

        ⑶ unshift 向数组的开头添加新的内容，返回的也是增加后的数组长度，原来的数组也改变了。

        ⑷ shift 删除数组的第一项，返回的是删除的那一项，原有数组改变。

　　　　⑸ splice:它既能实现删除，也能实现增加，还能实现修改

           splice(n, 0, x) 向数组的中间某个位置添加新的内容，从索引 n 开始，删除0个内容，把新增加的内容 x 放在索引 n 的前面，返回的是一个空的数组，原有的数组改变。

           splice(n, m) 删除数组中指定的某些项，从索引 n 开始（包含n），删除 m 个元素，把删除的内容当做一个新的数组返回，原有数组改变。

           splice(n, m, x) 把原有数组中的某些项进行替换（先删除，然后用 x 替换）从索引 n 开始删除 m 个元素，用 x 替换原来的，把删除的内容当做一个新的数组返回，原有数组改变。

           规律：splice(0, 0, x) 相当于 unshift

                 splice(ary.length, 0, x) 相当于 push

                 splice(ary.length-1,1)  相当于pop

       

    2:) 数组的查询和复制

        ⑹ slice(n, m) 从索引 n 开始（包含n），找到索引 m 处（不包含m），然后把找到的内容作为一个新的数组返回，原有的数组不变。

           slice(n) 从索引 n 开始（包含n），查找到数组的末尾，然后把找到的内容作为一个新的数组返回，原有数组不改变。

           slice(0) 或者 slice() 将原有的数组原封不动的复制一份，属于数组的克隆。

        ⑺ concat 也可以实现数组的克隆，原有的数组不改变（相当于slice(0)）。

           concat 的本意是实现数组的拼接


     3:）将数组转化为字符串

        ⑻ toString 把数组中的每一项拿出来用逗号隔开，原有数组不变。

           示例：var ary = [12, 23, 34, 45];
                 var res = ary.toString();
                 console.log(res);               //  "12,23,34,45"

        ⑼ join(分隔符) 把数组的每一项拿出来用指定的分隔符隔开，原有数组不变。

           示例：实现数组中的数字求和
             
                 <script type="text/javascript">

                        var ary=[3,5,65,2,5,75,23,7,9];

                     // var str=ary.join("+")     // "3+5+65+2+5+75+23+7+9"

                     // var total=eval(str);      // 将指定的字符串变成真正的表达式执行

                     // console.log(total);

                        console.log(eval(ary.join("+")));   // eval：是指将JS中把字符串变为JS表达是执行的一个方法

                 </script>


     4:) 数组的排列和排序

        ⑽ reverse 数组倒过来排列，原有数组改变。

        ⑾ sort 数组的排序，可以实现由大到小（由小到大），原有的数组改变；直接写 sort 只能处理10以内的数字排序，处理10以上的我们需要传递一个参数，这个参数是一个函数。

           ary.sort(function(a,b){return a-b;}); 由小到大排序，反之由大到小。

    
     5:) 一些常用但不兼容的

        indexof/forEach/map(3个都需要处理兼容)



四、String 字符串类
  
     1:) charAt(索引) 指获取索引指定位置的字符

         charCodeAt(索引) 获取指定的索引的字符对应的ASII值 

     2:) 截取字符串当中的某一位的方法有3种：

         ① substr(n,m)  从索引n开始截取m个字符

         ② substring(n,m)  从索引n开始，找到索引m处（不包含m）将找到的字符返回

         ③ slice(n,m) 从索引n开始，找到索引m处（不包含m）将找到的字符返回。slice 支持负数索引(从后往前查找)

            (注意如果只是写了一个n, 如slice(n)。没有m代表截取到末尾)

            举个栗子 var str = "good good study, day day up!"
             
                     console.log(str.slice(-11,-1));    //  返回的是day day up

                     console.log(str.slice(-11));       //  返回的是day day up!
                
     3:) indexOf(字符) ：获取指定字符在字符串中第一次出现的索引位置

         lastIndexOf(字符) ：获取指定字符在字符串中最后一次出现的索引位置

         (如果以上两个没有查找到要找的字符，那么返回的是-1。基于这个理念在项目中常用这两个方法判断字符串中是否包含某个字符)

     4:) 大小写转换

         toLowerCase：将所有字母转换为小写

         toUpperCase: 将所有字母转换为大写

     5:) 替换

         replace (要替换的老字符，替换成新的字符)

         在不使用正则的情况下，每一次调用只能替换一次,一般情况下都是用正则的。

     6:) 将字符串按照指定的分隔符拆分成数组（返回的永远是数组） 

         split(分隔符)