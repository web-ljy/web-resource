1、client系列：

   clientWidth/clientHeight:内容的宽度/高度+左右/上下填充

   clientLeft:左边框的宽度/clientTop:上边框的高度    (也就是border[Left/Top]Width)

2、offset系列：

   offsetWidth/offseHeight:clientWidth/clientHeight+左右/上下边框

   offsetParent:当前元素的父级参照物

   offsetLeft/offsetTop:当前元素的外边框距离父级参照物的内边框的偏移量

3、scroll系列:

   scrollWidth/scrollHeight:和clientWidth/clientHeight一模一样（前提是：容器中的内容没有溢出的情况下）

   如果容器中的内容有溢出，那么获得的结果是如下规则：

   ① scrollWidth:真实内容的宽度（包含溢出）+ 左填充

   ② scrollHeight:真实内容的高度（包含溢出）+ 上填充

   注意：如果设置的溢出隐藏属性（overflow:"hidden";），最终得到的结果是有影响的；在不同的浏览器中获得到的结果也是不同的；（获得到的结果都是"约等于"的值）

   scrollLeft/scrollTop:滚动条卷去的宽度/高度

4、关于操作浏览器本身的盒子模型信息

   clientWidth/clientHeight:是当前浏览器可视区的宽度和高度（一屏的宽度和高度）

   scrollWidth/scrollHeight:是当前页面的真实宽度和高度（所有屏加起来的宽度和高度；但是是一个约等于的值）

   document.documentElement[attr] || document.body[attr];

   // 编写一个有关于操作浏览器盒子模型的方法

    function win(attr, value){      // 如果只传递了attr而没有传递value,默认就是"获取"；如果两个参数都传递了，那么就是"设置"；
        if(typeof value === "undefined"){     // 如果没有传递value
            return document.documentElement[attr] || document.body[attr];
        }
        document.documentElement[attr] = value;
        document.body[attr] = value;
    }
    
    例如：调用上面的方法
    console.log(win("clientHeight"));
    console.log(win("scrollTop", 0));

   